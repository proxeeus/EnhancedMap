using EnhancedMap.Core;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PremiumConverter
{
    public static class Helpers
    {
        public static bool IgnoreLine(string line)
        {
            if (line.StartsWith("#") || line.StartsWith("overrideid") || line.StartsWith("overridemap") || line.StartsWith("overridemintime") || line.StartsWith("overridemaxtime"))
                return true;
            return false;
        }

        /// <summary>
        /// The first 6 slots of a given line are for the object types to spawn. Can be mobiles & items (or whatever that is spawnable, actually...)
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static bool HasObjectsToSpawn(string[] data)
        {
            if (!string.IsNullOrEmpty(data[1]) || !string.IsNullOrEmpty(data[2]) || !string.IsNullOrEmpty(data[3]) || !string.IsNullOrEmpty(data[4]) || !string.IsNullOrEmpty(data[5]) ||
                !string.IsNullOrEmpty(data[6]))
                    return true;
            return false;
        }

        private static void AddSubTypes(string data, SpawnDefinition spawnDef)
        {
            var subTypes = data.Split(':');
            foreach (var subType in subTypes)
                spawnDef.Mobiles.Add(subType);
        }
        public static void AddSpawnTypesToDefinition(string[] data, SpawnDefinition def)
        {
            if (!string.IsNullOrEmpty(data[1]))
            {
                if(data[1].Contains(":"))
                    Helpers.AddSubTypes(data[1], def);
                else
                    def.Mobiles.Add(data[1]);
            }

            if (!string.IsNullOrEmpty(data[2]))
            {
                if (data[2].Contains(":"))
                    Helpers.AddSubTypes(data[2], def);
                else
                    def.Mobiles.Add(data[2]);
            }
            if (!string.IsNullOrEmpty(data[3]))
            {
                if (data[3].Contains(":"))
                    Helpers.AddSubTypes(data[3], def);
                else
                    def.Mobiles.Add(data[3]);
            }

            if (!string.IsNullOrEmpty(data[4]))
            {
                if (data[4].Contains(":"))
                    Helpers.AddSubTypes(data[4], def);
                else
                    def.Mobiles.Add(data[4]);
            }

            if (!string.IsNullOrEmpty(data[5]))
            {
                if (data[5].Contains(":"))
                    Helpers.AddSubTypes(data[5], def);
                else
                    def.Mobiles.Add(data[5]);
            }

            if (!string.IsNullOrEmpty(data[6]))
            {
                if (data[6].Contains(":"))
                    Helpers.AddSubTypes(data[6], def);
                else
                    def.Mobiles.Add(data[6]);
            }

        }

        public static void Write(List<SpawnDefinition> spawnDefs, string fileName)
        {
            using (var streamWriter = new StreamWriter(fileName))
            {
                streamWriter.WriteLine("'{0}' -- this file has been automatically generated by a tool.", fileName);
                streamWriter.WriteLine("---------------------------------------------------------------");
                foreach (var spawnDef in spawnDefs)
                {
                    var line = string.Empty;

                    // Basic format
                    // +name [MobileTypeA, MobileTypeB, etc]: X Y MapID NPCCount HomeRange BringToHome MinTime MaxTime Team Description
                    // "," can also be "|" depending on spawn being unique or not

                    var template = @"+{0} [{1}]: {2} {3} {4} {5} {6} {7} {8} {9} {10}";

                    var mobBuilder = new StringBuilder();
                    var separator = string.Empty;
                    if (spawnDef.UniqueSpawn)
                        separator = ", ";
                    else
                        separator = "| ";
                    var mobIndex = 1;
                    for (var i = 0; i < spawnDef.Mobiles.Count; i++)
                    {
                        mobBuilder.Append(spawnDef.Mobiles[i]);
                        if (mobIndex < spawnDef.Mobiles.Count)
                        {
                            mobBuilder.Append(separator);
                            mobIndex++;
                        }
                    }

                    line = string.Format(template, spawnDef.SpawnerName.ToLower(),
                        mobBuilder.ToString(), spawnDef.X, spawnDef.Y, spawnDef.MapId, spawnDef.NPCCount, spawnDef.HomeRange, spawnDef.BringToHome, spawnDef.MinTime, spawnDef.MaxTime, spawnDef.Team);

                    streamWriter.WriteLine(line);
                }
            }
        }
    }
}
